option output = "../out/small"

import "./dependency" as external

type health = u8[0.0..100]
type hash_map = map {[string]: u8}
type byte_vector = vector<u8, u8, u8>

type keywords = enum {
    "option",
}

type opt<T> = enum "exists" {
    true {
        value: T,
        exists: "hi"
    },
    false {}
}

type entity<C, V> = struct {
    id: u8,
    class: C,
    health: health,
    value: V
}

type cat = entity<"cat", struct {meows: u8}>

type weapon = struct {
    ammo: u8(0..0)
}

type shotgun = weapon & struct {
    pellets: u8
}

@stable
@bitpack
type node<T> = struct {
    value: T,
    next: node<T>?
}

type byte_linked_list = node<u8>
type dword_linked_list = node<u32>

type invalid_map = map {[u8]: u8}

type vector2 = vector<f32, f32, 0>

type class = "Part"
type part = Instance<class>

event send {
    from: Server,
    type: Reliable,
    call: SingleSync,
    data: (target: cat, weapon: shotgun)
}

function request {
    yield: Coroutine,
    data: u8
}

scope foo {
    type bar = u8(0..1)
}

type foo_bar = foo.bar
type meow_murr = external.meow.murr<u8>