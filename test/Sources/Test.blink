option Casing = Pascal
option Typescript = true
option TypesOutput = "../../Network/Types.luau"
option ClientOutput = "../../Network/Client.luau"
option ServerOutput = "../../Network/Server.luau"
option SyncValidation = true
option WriteValidations = true
option ManualReplication = false

import "./Indexers"
import "./Sub-Sources/Source"
import "./Sub-Sources/Source" as ImportA

struct ImportReference {
    A: ImportA.a,
    B: Source.a
}

type A = CFrame
type B = CFrame[10]
type C = CFrame?
type D = Color3

export type Byte = u8

export type Color = Color3
export type ColorArray = Color3[]
export type DateSeconds = DateTime
export type DateMilliseconds = DateTimeMillis
export type BrickkColor = BrickColor

export type ExactRange = f32(0)
export type DecimalRange = f32(-5.5..10.5)
export type NegativeRange = i8(-5..10)
export type UnboundUpper = f32(-0.0..)
export type UnboundLower = f32(..-0.0)

export type Buffer = buffer
export type ExactBuffer = buffer(9)
export type BoundedBuffer = buffer(0..1000)

type IntegerVector = vector<i16>
type HalfPrecisionCFrame = CFrame<f32, f16>

type InstanceArray = Instance(Sound)[10]
type InstanceArrayOptional = Instance(Sound)[10]?
type ConstrainedArray = u8(0..10)[10]

export type MultiDimensionalArray = u8[][][]

enum States = { A, B, C, D }

set Flags8 = {F1, F2, F3, F4, F5, F6, F7, F8}
set Flags16 = {F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16}
set Flags32 = {F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29, F30, F31, F32}
set Flags33 = {F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29, F30, F31, F32, F33}

struct StructOfFlags {
    A: set {Flag, Flag1},
    B: set {Flag, Flag1},
    C: set {Flag, Flag1},
}

map MapSimple = {[string]: u8}
map MapComplex = {[string(0..20)]: u8(0..100)[8]}
map MapReference = {[States]: States}?
export map MapNested = {[MapSimple]: MapSimple}

map ArrayMap = {[u8]: u8}[0..20]
enum ArrayEnum = {A, B, C}[0..20]
struct ArrayStruct {

}[0..20]

struct Generic<A, B, C> {
    Data: A,
    Array: A[],
    Optional: C?,
    Nested: struct {
        Value: B
    }
}

type struct = u8
struct Conflict {
    type: u8
}

enum Event = "Type" {
    Join {
        Name: string,
        UserId: f64,
    },
    Chat {
        UserId: f64,
        Message: string
    },
    Leave {
        UserId: f64
    }
}

type Float16 = f16

export struct Standalone {
    One: u8,
    Two: u8,
    Three: u8,
    Event: Event,
    Nested: struct {
        Four: string,
        Five: string
    }
}

type Number = u8
struct Example {
    Field: u8?,
    Float16Field: f16?,
    Enum: States,
    Nested: struct {
        Guh: u8,
        Array: u8[10],
        OptionalArray: u8[2]?
    }
}

set PrimitiveFlag = {
    CFrame
}

enum PrimitiveEnum = {
    CFrame
}

enum PrimitiveTagEnum = "Type" {
    CFrame {}
}

struct PrimitiveField {
    CFrame: u8
}

map GenericMap<K, V> = {[K]: V}

struct GenericMerge<A, B> {
    Map: GenericMap<A[], B>,
    Data: A,
    Struct: Generic<u8, string, B[]>,
    AnotherNested: struct {
        Value: B
    }
}

struct MergeStruct {
    ..Example,
    ..GenericMerge<u8, f64>
}

struct MapStruct {
    Map: map {[string]: u8}
}

event SendOccupiedCell {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: IntegerVector
}

event ClientPollEvent {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
    Poll: true,
    Data: MergeStruct
}

event ClientUnreliablePollEvent {
    From: Client,
    Type: Unreliable,
    Call: SingleSync,
    Poll: true,
    Data: MergeStruct
}

event ClientEmptyPollEvent {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
    Poll: true,
}

event ClientEmptyUnreliablePollEvent {
    From: Client,
    Type: Unreliable,
    Call: SingleSync,
    Poll: true,
}

event ServerPollEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Poll: true,
    Data: MergeStruct
}

event ServerUnreliablePollEvent {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
    Poll: true,
    Data: MergeStruct
}

event ServerEmptyPollEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Poll: true,
}

event ServerEmptyUnreliablePollEvent {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
    Poll: true,
}

event ClientEmptyEvent {
    From: Client,
    Type: Reliable,
    Call: SingleSync
}

event ClientEmptyUnreliableEvent {
    From: Client,
    Type: Unreliable,
    Call: SingleSync
}

event EmptyEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
}

event EmptyUnreliableEvent {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
}

function EmptyFunction {
    Yield: Coroutine
}

event Flags8 {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Flags8
}

event Flags16 {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Flags16
}

event Flags32 {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Flags32
}
event Flags33 {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Flags33
}

event DynamicMap {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: map {[u8]: struct {Static: u8, Dynamic: buffer}}
}

event DynamicArray {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: struct {Static: u8, Dynamic: buffer}[12]
}

event PlayerEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Event
}

event Booleans {
    from: Client,
    type: Reliable,
    call: SingleAsync,
    data: boolean[]
}

event Generic {
    From: Server,
    Type: Reliable,
    Data: Generic<u8, u8, u8>,
    Call: SingleSync
}

event GenericArray {
    From: Server,
    Type: Reliable,
    Data: Generic<u8, u8, u8>[]?,
    Call: SingleSync
}

event Unknown {
    Type: Reliable,
    From: Server,
    Call: SingleSync,
    Data: unknown,
}

event MapEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: MapSimple
}

event MapStructEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: MapStruct
}

event MapComplexEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: MapComplex
}

event MapReferenceEvent {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: MapReference
}

event ArrayPrimitive {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
    Data: u8[8]
}

event OptionalPrimitive {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
    Data: u8?
}

event ManyReliableSync {
    From: Server,
    Type: Reliable,
    Call: ManySync,
    Data: u8
}

event ManyReliableAsync {
    From: Server,
    Type: Reliable,
    Call: ManyAsync,
    Data: u8
}

event ManyUnreliableSync {
    From: Server,
    Type: Unreliable,
    Call: ManySync,
    Data: u8
}

event ManyUnreliableAsync {
    From: Server,
    Type: Unreliable,
    Call: ManyAsync,
    Data: u8
}

event ReliableServer {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: u8
}

event ReliableServerAsync {
    From: Server,
    Type: Reliable,
    Call: SingleAsync,
    Data: u8
}

event ReliableClient {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
    Data: u8
}

event UnreliableServer {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
    Data: u8
}

event UnreliableServerAsync {
    From: Server,
    Type: Unreliable,
    Call: SingleAsync,
    Data: u8
}

event UnreliableClient {
    From: Client,
    Type: Unreliable,
    Call: SingleSync,
    Data: u8
}

event InstanceAny {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Instance
}

event InstanceOfType {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Instance(Sound)
}

event InstanceOptional {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Instance?
}

event Reference {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Example?
}

event ReferenceArray {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Example[8]
}

event ReferenceOptional {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: Example?
}

function RemoteFunction {
    Yield: Coroutine,
    Data: u8,
    Return: u8
}

event Tuple {
    From: Server,
    Type: Reliable,
    Call: SingleSync,
    Data: (u8, States, u16?, Instance, Instance?, u8[8])
}

event TupleUnreliable {
    From: Server,
    Type: Unreliable,
    Call: SingleSync,
    Data: (u8, States, u16?, Instance, Instance?)
}

function TupleFunction {
    Yield: Coroutine,
    Data: (u8, States, u16?, Instance, Instance?),
    Return: (Instance?, Instance, u16?, States, u8)
}

scope AnotherScope {
    event InScopeEvent {
        From: Server,
        Type: Reliable,
        Call: SingleSync,
        Data: u8
    }

    scope ScopeWithinAnotherScope {
        type ExampleType = u8
        event InAnotherScopeEvent {
            From: Server,
            Type: Reliable,
            Call: SingleSync,
            Data: ExampleType
        }
    }
}

scope ExampleScope {
    event InScopeEvent {
        From: Server,
        Type: Reliable,
        Call: SingleSync,
        Data: AnotherScope.ScopeWithinAnotherScope.ExampleType
    }
}

scope Issue33 {
    enum Foo = {
        One,
        Two
    }

    map Map<T> = {[Foo]: f64}

    enum Enum<T> = "Tag" {
        Variant {
            field: Foo
        }
    }

    struct Struct<T> {
        field: Foo
    }

    event Event {
        From: Server,
        Type: Reliable,
        Call: SingleSync,
        Data: (Map<u8>, Enum<u8>, Struct<u8>)
    }
}